var shado = shado || {}; !function (t) { var e = function (t, e) { var r = "[object String]" !== Object.prototype.toString.call(t) && "[object Date]" !== Object.prototype.toString.call(t), a = "[object String]" !== Object.prototype.toString.call(e) && "[object Date]" !== Object.prototype.toString.call(e); if (r || a) throw new Error("Parameters are not of expected type string or date") }; t.date = t.date || {}, t.date.createDate = function (t, e) { if ("[object String]" === Object.prototype.toString.call(t)) { var r = t.match(/^(\d{2})\/(\d{2})\/(\d{4})$/); return e ? new Date(r[3], r[1] - 1, r[2]) : new Date(r[3], r[2] - 1, r[1]) } return t }, t.date.setValues = function (t, r, a) { var n = this; e(t, r), n.firstDate = n.createDate(t, a), n.secondDate = n.createDate(r, a), n.oneDay = 864e5, n.getDifference = function () { return n.secondDate - n.firstDate } }, t.date.compareYears = function () { var t = this.getDifference(); return Math.floor(t / this.oneDay % 1.5 == 1 ? t / this.oneDay / 365.24 : t / this.oneDay / 365) }, t.date.compareMonths = function () { var t = this.getDifference(); return Math.floor(t / this.oneDay / 365 * 12 % 1 == 0 ? t / this.oneDay / 365 * 12 : t / this.oneDay / 365.24 * 12) }, t.date.compareWeeks = function () { var t = this.getDifference(); return Math.round(t / this.oneDay) / 7 | 0 }, t.date.compareDays = function (t) { var e = this.getDifference(); return Math.round(e / this.oneDay) + (t ? 1 : 0) }, t.date.compareHours = function (t) { var e = this.getDifference(); return 24 * Math.floor(e / this.oneDay) + (t ? 24 : 0) }, t.date.compareMinutes = function (t) { var e = this.getDifference(); return 60 * (24 * Math.floor(e / this.oneDay) + (t ? 24 : 0)) }, t.date.compareSeconds = function (t) { var e = this.getDifference(); return 86400 * (Math.round(e / this.oneDay) + (t ? 1 : 0)) } } (shado);