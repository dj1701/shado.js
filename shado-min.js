var shado = shado || {}; !function (a) { var b = function (a, b) { var c = "[object String]" !== Object.prototype.toString.call(a) && "[object Date]" !== Object.prototype.toString.call(a), d = "[object String]" !== Object.prototype.toString.call(b) && "[object Date]" !== Object.prototype.toString.call(b); if (c || d) throw new Error("Parameters are not of expected type string or date") }; a.date = a.date || {}, a.date.createDate = function (a, b) { if ("[object String]" === Object.prototype.toString.call(a)) { var c = a.match(/^(\d{2})\/(\d{2})\/(\d{4})$/); return b ? new Date(c[3], c[1] - 1, c[2]) : new Date(c[3], c[2] - 1, c[1]) } return a }, a.date.setValues = function (a, c, d) { var e = this; b(a, c), e.firstDate = e.createDate(a, d), e.secondDate = e.createDate(c, d), e.oneDay = 864e5, e.getDifference = function () { return e.secondDate - e.firstDate } }, a.date.compareYears = function () { var a = this.getDifference(); return 0 | (a / this.oneDay / 365 % 1 === 0 ? a / this.oneDay / 365 : a / this.oneDay / 365.24) }, a.date.compareMonths = function () { var a = 12 * (this.secondDate.getFullYear() - this.firstDate.getFullYear()); return a += this.secondDate.getMonth() - this.firstDate.getMonth(), this.secondDate.getDate() < this.firstDate.getDate() ? a -= 1 : a }, a.date.compareWeeks = function () { var a = this.getDifference(); return Math.round(a / this.oneDay) / 7 | 0 }, a.date.compareDays = function (a) { var b = this.getDifference(); return Math.round(b / this.oneDay) + (a ? 1 : 0) }, a.date.compareHours = function (a) { var b = this.getDifference(); return 24 * Math.floor(b / this.oneDay) + (a ? 24 : 0) }, a.date.compareMinutes = function (a) { var b = this.getDifference(); return 60 * (24 * Math.floor(b / this.oneDay) + (a ? 24 : 0)) }, a.date.compareSeconds = function (a) { var b = this.getDifference(); return 86400 * (Math.round(b / this.oneDay) + (a ? 1 : 0)) } }(shado);